/**
 * @fileoverview Firestore Security Rules for Esport Arena.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-related data,
 * while allowing more open access to public data like tournaments and store items.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user with matching UID.
 * - /users/{userId}/wallet: User's wallet, owned by the user with matching UID.
 * - /users/{userId}/wallet/transactions/{transactionId}: Transactions for a user's wallet.
 * - /tournaments/{tournamentId}: Tournament information, publicly readable.
 * - /tournaments/{tournamentId}/matches/{matchId}: Matches within a tournament.
 * - /participants/{participantId}: Participant information.
 * - /users/{userId}/videos/{videoId}: Videos owned by a specific user.
 * - /store_items/{storeItemId}: Store items, publicly readable.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Delivery addresses for a user.
 * - /orders/{orderId}: Order information.
 * - /chat_messages/{chatMessageId}: Chat messages between users.
 * - /friendships/{friendshipId}: Friendship relationships between users.
 * - /leaderboards/{leaderboardId}: Leaderboard information.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Leaderboard entries.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a user.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Listing of user subcollections (e.g., notifications) is allowed only by the owner.
 * - Public data (tournaments, store items) is readable by anyone.
 * - Write access to public data is currently open for prototyping but MUST be secured later.
 *
 * Denormalization for Authorization:
 * - Wallet and Transaction documents contain denormalized 'userId' fields
 *   to allow ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Enforces ownership for all write operations.
     * @path /users/{userId}
     * @allow (get) Any signed-in user can read a profile.
     * @allow (create) User can create their own profile if the userId matches their auth UID.
     * @allow (update) User can update their own profile if the userId matches their auth UID.
     * @allow (delete) User can delete their own profile if the userId matches their auth UID.
     * @deny (create) User tries to create a profile with a mismatched userId.
     * @deny (update) User tries to update someone else's profile.
     * @deny (delete) User tries to delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user wallet data. Enforces ownership for all write operations.
     * @path /users/{userId}/wallet
     * @allow (get) User can read their own wallet data.
     * @allow (create) User can create their own wallet if the userId matches their auth UID.
     * @allow (update) User can update their own wallet if the userId matches their auth UID.
     * @allow (delete) User can delete their own wallet if the userId matches their auth UID.
     * @deny (create) User tries to create a wallet with a mismatched userId.
     * @deny (update) User tries to update someone else's wallet.
     * @deny (delete) User tries to delete someone else's wallet.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      allow get: if isSignedIn() && isWalletOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isWalletOwner(userId);
      allow update: if isSignedIn() && isExistingWalletOwner(userId);
      allow delete: if isSignedIn() && isExistingWalletOwner(userId);
    }

    /**
     * @description Manages user transaction data within a wallet. Enforces ownership for all write operations.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (get) User can read their own transaction data.
     * @allow (create) User can create their own transaction if the userId matches their auth UID.
     * @allow (update) User can update their own transaction if the userId matches their auth UID.
     * @allow (delete) User can delete their own transaction if the userId matches their auth UID.
     * @deny (create) User tries to create a transaction with a mismatched userId.
     * @deny (update) User tries to update someone else's transaction.
     * @deny (delete) User tries to delete someone else's transaction.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isSignedIn() && isTransactionOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isTransactionOwner(userId);
      allow update: if isSignedIn() && isExistingTransactionOwner(userId);
      allow delete: if isSignedIn() && isExistingTransactionOwner(userId);
    }

    /**
     * @description Allows public read access to tournament information. Write access is open for prototyping and MUST be secured later.
     * @path /tournaments/{tournamentId}
     * @allow (get) Anyone can read tournament data.
     * @allow (list) Anyone can list tournaments.
     * @principle Allows public read access. Write access is open for prototyping.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Allows public read access to match information within a tournament. Write access is open for prototyping and MUST be secured later.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get) Anyone can read match data.
     * @allow (list) Anyone can list matches within a tournament.
     * @principle Allows public read access. Write access is open for prototyping.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages participant data. Write access is open for prototyping and MUST be secured later.
     * @path /participants/{participantId}
     * @allow (get) Anyone can read participant data.
     * @allow (list) Anyone can list participants.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages video data for a user. Enforces ownership for all write operations.
     * @path /users/{userId}/videos/{videoId}
     * @allow (get) Any signed-in user can read video data.
     * @allow (create) User can create their own video if the userId matches their auth UID.
     * @allow (update) User can update their own video if the userId matches their auth UID.
     * @allow (delete) User can delete their own video if the userId matches their auth UID.
     * @deny (create) User tries to create a video with a mismatched userId.
     * @deny (update) User tries to update someone else's video.
     * @deny (delete) User tries to delete someone else's video.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/videos/{videoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isVideoOwner(userId);
      allow update: if isSignedIn() && isExistingVideoOwner(userId);
      allow delete: if isSignedIn() && isExistingVideoOwner(userId);
    }

    /**
     * @description Allows public read access to store item information. Write access is open for prototyping and MUST be secured later.
     * @path /store_items/{storeItemId}
     * @allow (get) Anyone can read store item data.
     * @allow (list) Anyone can list store items.
     * @principle Allows public read access. Write access is open for prototyping.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages delivery address data for a user. Enforces ownership for all write operations.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (get) User can read their own delivery address data.
     * @allow (create) User can create their own delivery address if the userId matches their auth UID.
     * @allow (update) User can update their own delivery address if the userId matches their auth UID.
     * @allow (delete) User can delete their own delivery address if the userId matches their auth UID.
     * @deny (create) User tries to create a delivery address with a mismatched userId.
     * @deny (update) User tries to update someone else's delivery address.
     * @deny (delete) User tries to delete someone else's delivery address.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isSignedIn() && isDeliveryAddressOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isDeliveryAddressOwner(userId);
      allow update: if isSignedIn() && isExistingDeliveryAddressOwner(userId);
      allow delete: if isSignedIn() && isExistingDeliveryAddressOwner(userId);
    }

    /**
     * @description Manages order data. Write access is open for prototyping and MUST be secured later.
     * @path /orders/{orderId}
     * @allow (get) Anyone can read order data. // TODO: secure this
     * @allow (list) Anyone can list orders.  // TODO: secure this
     */
    match /orders/{orderId} {
      allow get: if isSignedIn(); // TODO: Secure this later
      allow list: if isSignedIn(); // TODO: Secure this later
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages chat message data. Write access is open for prototyping and MUST be secured later.
     * @path /chat_messages/{chatMessageId}
     */
    match /chat_messages/{chatMessageId} {
      allow get: if isSignedIn(); // TODO: Secure this later
      allow list: if isSignedIn(); // TODO: Secure this later
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages friendship data. Write access is open for prototyping and MUST be secured later.
     * @path /friendships/{friendshipId}
     */
    match /friendships/{friendshipId} {
      allow get: if isSignedIn(); // TODO: Secure this later
      allow list: if isSignedIn(); // TODO: Secure this later
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Allows public read access to leaderboard information. Write access is open for prototyping and MUST be secured later.
     * @path /leaderboards/{leaderboardId}
     * @allow (get) Anyone can read leaderboard data.
     * @allow (list) Anyone can list leaderboards.
     * @principle Allows public read access. Write access is open for prototyping.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages leaderboard entry data. Write access is open for prototyping and MUST be secured later.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if isSignedIn(); // TODO: Secure this later
      allow list: if isSignedIn(); // TODO: Secure this later
      allow create: if isSignedIn(); // TODO: Secure this later
      allow update: if isSignedIn(); // TODO: Secure this later
      allow delete: if isSignedIn(); // TODO: Secure this later
    }

    /**
     * @description Manages notification data for a user. Enforces ownership for all write operations.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get) User can read their own notification data.
     * @allow (create) User can create their own notification if the userId matches their auth UID.
     * @allow (update) User can update their own notification if the userId matches their auth UID.
     * @allow (delete) User can delete their own notification if the userId matches their auth UID.
     * @deny (create) User tries to create a notification with a mismatched userId.
     * @deny (update) User tries to update someone else's notification.
     * @deny (delete) User tries to delete someone else's notification.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isNotificationOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isNotificationOwner(userId);
      allow update: if isSignedIn() && isExistingNotificationOwner(userId);
      allow delete: if isSignedIn() && isExistingNotificationOwner(userId);
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isWalletOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isTransactionOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isVideoOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isDeliveryAddressOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isNotificationOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }
  
  function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
  }

  function isExistingWalletOwner(userId) {
      return isWalletOwner(userId) && resource.data != null;
  }

  function isExistingTransactionOwner(userId) {
      return isTransactionOwner(userId) && resource.data != null;
  }

    function isExistingVideoOwner(userId) {
      return isVideoOwner(userId) && resource.data != null;
  }

  function isExistingDeliveryAddressOwner(userId) {
    return isDeliveryAddressOwner(userId) && resource.data != null;
  }
    function isExistingNotificationOwner(userId) {
    return isNotificationOwner(userId) && resource.data != null;
  }
}