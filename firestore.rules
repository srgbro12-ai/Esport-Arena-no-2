/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and related data,
 * with public read access to tournaments, store items, chat messages, friendships, and leaderboards.
 *
 * Data Structure:
 * - /users/{userId}: User profile and channel information, owned by the user.
 * - /users/{userId}/wallet: User's wallet, owned by the user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Transactions for a user's wallet, owned by the user.
 * - /tournaments/{tournamentId}: Tournament information, publicly readable.
 * - /tournaments/{tournamentId}/matches/{matchId}: Match information for tournaments, publicly readable.
 * - /participants/{participantId}: Participant information, publicly readable.
 * - /users/{userId}/videos/{videoId}: Videos uploaded by a user, owned by the user.
 * - /store_items/{storeItemId}: Store item information, publicly readable.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Delivery addresses for a user, owned by the user.
 * - /orders/{orderId}: Order information, owned by the user.
 * - /chat_messages/{chatMessageId}: Chat messages between users, publicly readable.
 * - /friendships/{friendshipId}: Friendship relationships between users, publicly readable.
 * - /leaderboards/{leaderboardId}: Leaderboard information, publicly readable.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Leaderboard entries, publicly readable.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a user, owned by the user.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information harvesting.
 * - Ownership is enforced through path-based matching and denormalized fields where necessary.
 * - Public read access is granted to collections like tournaments, store items, and leaderboards.
 * - Write operations are always protected by authorization checks to prevent unauthorized data modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates their own profile with matching ID.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create profile for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is denied

      allow create: if isSignedIn() && isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for user wallets. Only the authenticated user can read/write their own wallet.
     * @path /users/{userId}/wallet
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates their own wallet.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create wallet for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for user wallet transactions. Only the authenticated user can read/write their own transactions.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates a transaction in their own wallet.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create a transaction in wallet for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to tournaments. Write access is not allowed.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) Any user can read tournament information.
     * @deny (create) Any user attempts to create a tournament.
     * @principle Allows public read access while restricting write access.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to tournament matches. Write access is not allowed.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) Any user can read match information for a tournament.
     * @deny (create) Any user attempts to create a match for a tournament.
     * @principle Allows public read access while restricting write access.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to participants. Write access is not allowed.
     * @path /participants/{participantId}
     * @allow (get, list) Any user can read participant information.
     * @deny (create) Any user attempts to create a participant.
     * @principle Allows public read access while restricting write access.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for user videos. Only the authenticated user can read/write their own videos.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates a video in their own profile.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create video in profile for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/videos/{videoId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to store items. Write access is not allowed.
     * @path /store_items/{storeItemId}
     * @allow (get, list) Any user can read store item information.
     * @deny (create) Any user attempts to create a store item.
     * @principle Allows public read access while restricting write access.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for user delivery addresses. Only the authenticated user can read/write their own delivery addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates a delivery address in their own profile.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create delivery address in profile for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Enforces document ownership for orders. Only the authenticated user can read/write their own orders.
     * @path /orders/{orderId}
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates their own order.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create order for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /orders/{orderId} {
      allow get: if request.auth.uid == resource.data.userId;
      allow list: if false;

      allow create: if isSignedIn() && (request.resource.data.userId == request.auth.uid);
      allow update: if isOrderOwner();
      allow delete: if isOrderOwner();

      function isOrderOwner() {
        return isSignedIn() && (request.resource.data.userId == request.auth.uid) && (resource.data.userId == request.auth.uid);
      }
    }

    /**
     * @description Allows public read access to chat messages. Write access is not allowed.
     * @path /chat_messages/{chatMessageId}
     * @allow (get, list) Any user can read chat messages.
     * @deny (create) Any user attempts to create a chat message.
     * @principle Allows public read access while restricting write access.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to friendships. Write access is not allowed.
     * @path /friendships/{friendshipId}
     * @allow (get, list) Any user can read friendship information.
     * @deny (create) Any user attempts to create a friendship.
     * @principle Allows public read access while restricting write access.
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to leaderboards. Write access is not allowed.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) Any user can read leaderboard information.
     * @deny (create) Any user attempts to create a leaderboard.
     * @principle Allows public read access while restricting write access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to leaderboard entries. Write access is not allowed.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get, list) Any user can read leaderboard entry information.
     * @deny (create) Any user attempts to create a leaderboard entry.
     * @principle Allows public read access while restricting write access.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces document ownership for user notifications. Only the authenticated user can read/write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User xK9cnmuoCnb6JmiUEopqIbepiTt2 creates a notification in their own profile.
     * @deny (create) User yK9cnmuoCnb6JmiUEopqIbepiTt2 attempts to create notification in profile for xK9cnmuoCnb6JmiUEopqIbepiTt2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isSelfCreation(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    //Removed function that was not being used.
  }
}