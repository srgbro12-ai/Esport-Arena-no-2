/**
 * @file Firestore Security Rules for Esport Arena
 * @description This ruleset enforces a user-ownership model for user profiles, wallets, videos, delivery addresses, and notifications, while allowing public read access to tournaments and store items.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profiles, channels, and related information.
 * - /users/{userId}/wallet: Stores wallet information for each user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history for a user's wallet.
 * - /tournaments/{tournamentId}: Stores tournament information (publicly readable).
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match information for tournaments.
 * - /participants/{participantId}: Stores information about tournament participants.
 * - /users/{userId}/videos/{videoId}: Stores video information for a user's channel.
 * - /store_items/{storeItemId}: Stores store item information (publicly readable).
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery addresses for users.
 * - /orders/{orderId}: Stores order information. Accessible only with valid `userId`
 * - /chat_messages/{chatMessageId}: Stores chat messages between users.
 * - /friendships/{friendshipId}: Stores friendship relationships between users.
 * - /leaderboards/{leaderboardId}: Stores leaderboard information.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for each user.
 *
 * @keySecurityDecisions
 * - User-owned data (profiles, wallets, videos, delivery addresses, notifications) is strictly controlled by the user's authentication UID.
 * - Listing of user documents is allowed only for the authenticated user.
 * - Tournaments and Store Items are publicly readable, but write access is not defined in this prototype.
 * - Orders are only accessible to their respective users.
 *
 * @denormalizationForAuthorization
 * - Wallet and Transaction documents include a `userId` field to simplify ownership checks without requiring additional `get()` calls.
 * - Match documents include a `tournamentId` field to simplify checks without requiring additional `get()` calls.
 * - Participant documents include a `userId` and `tournamentId` to simplify authorization.
 * - Order documents include a `userId` for authorization purposes.
 * - LeaderboardEntry documents include a `leaderboardId` for authorization purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.  Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile at /users/user_abc with matching id field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user wallet data. Users can only read and write their own wallet.
     * @path /users/{userId}/wallet
     * @allow (create) User with UID 'user_abc' can create a wallet at /users/user_abc/wallet with matching userId field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their wallet at /users/user_abc/wallet.
     * @deny (create) User with UID 'user_xyz' cannot create a wallet at /users/user_abc/wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction history. Users can only read and write their own transaction history.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User with UID 'user_abc' can create a transaction at /users/user_abc/wallet/transactions/{transactionId} with matching userId field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their transaction at /users/user_abc/wallet/transactions/{transactionId}.
     * @deny (create) User with UID 'user_xyz' cannot create a transaction at /users/user_abc/wallet/transactions/{transactionId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tournament information. Tournaments are publicly readable.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) Any user can read tournament information.
     * @deny (create, update, delete) No user can create, update, or delete tournament information (unprotected).
     * @principle Allows public read access while restricting write access.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation if needed
      allow update: if false; // TODO: Add admin role validation if needed
      allow delete: if false; // TODO: Add admin role validation if needed
    }

    /**
     * @description Controls access to match information within a tournament.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) Any user can read match information.
     * @deny (create, update, delete) No user can create, update, or delete match information (unprotected).
     * @principle Allows public read access while restricting write access.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation if needed
      allow update: if false; // TODO: Add admin role validation if needed
      allow delete: if false; // TODO: Add admin role validation if needed
    }

    /**
     * @description Controls access to participant information.
     * @path /participants/{participantId}
     * @allow (get, list) Any user can read participant information.
     * @deny (create, update, delete) No user can create, update, or delete participant information (unprotected).
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin/owner validation if needed
      allow update: if false; // TODO: Add admin/owner validation if needed
      allow delete: if false; // TODO: Add admin/owner validation if needed
    }

    /**
     * @description Controls access to video information. Users can only read and write their own videos.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) User with UID 'user_abc' can create a video at /users/user_abc/videos/{videoId} with matching channelId field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their video at /users/user_abc/videos/{videoId}.
     * @deny (create) User with UID 'user_xyz' cannot create a video at /users/user_abc/videos/{videoId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.channelId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.channelId == resource.data.channelId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to store item information. Store Items are publicly readable.
     * @path /store_items/{storeItemId}
     * @allow (get, list) Any user can read store item information.
     * @deny (create, update, delete) No user can create, update, or delete store item information (unprotected).
     * @principle Allows public read access while restricting write access.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add admin role validation if needed
      allow update: if false;  // TODO: Add admin role validation if needed
      allow delete: if false;  // TODO: Add admin role validation if needed
    }

    /**
     * @description Controls access to delivery address information. Users can only read and write their own delivery addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User with UID 'user_abc' can create a delivery address at /users/user_abc/delivery_addresses/{deliveryAddressId} with matching userId field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their delivery address at /users/user_abc/delivery_addresses/{deliveryAddressId}.
     * @deny (create) User with UID 'user_xyz' cannot create a delivery address at /users/user_abc/delivery_addresses/{deliveryAddressId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to order information. Users can only read and write their own orders.
     * @path /orders/{orderId}
     * @allow (create) User with UID 'user_abc' can create an order with matching userId field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their order.
     * @deny (create) User with UID 'user_xyz' cannot create an order for user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /orders/{orderId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to chat messages.
     * @path /chat_messages/{chatMessageId}
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add role validation if needed
      allow update: if false;  // TODO: Add role validation if needed
      allow delete: if false;  // TODO: Add role validation if needed
    }

    /**
     * @description Controls access to friendship relationships.
     * @path /friendships/{friendshipId}
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add role validation if needed
      allow update: if false;  // TODO: Add role validation if needed
      allow delete: if false;  // TODO: Add role validation if needed
    }

    /**
     * @description Controls access to leaderboard information. Leaderboards are publicly readable.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) Any user can read leaderboard information.
     * @deny (create, update, delete) No user can create, update, or delete leaderboard information (unprotected).
     * @principle Allows public read access while restricting write access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add role validation if needed
      allow update: if false;  // TODO: Add role validation if needed
      allow delete: if false;  // TODO: Add role validation if needed
    }

    /**
     * @description Controls access to leaderboard entries.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add role validation if needed
      allow update: if false;  // TODO: Add role validation if needed
      allow delete: if false;  // TODO: Add role validation if needed
    }

    /**
     * @description Controls access to user notification data. Users can only read and write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user_abc' can create a notification at /users/user_abc/notifications/{notificationId} with matching userId field.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their notification at /users/user_abc/notifications/{notificationId}.
     * @deny (create) User with UID 'user_xyz' cannot create a notification at /users/user_abc/notifications/{notificationId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}