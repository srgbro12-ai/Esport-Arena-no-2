/**
 * @fileoverview Firestore Security Rules for Esport Arena.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and public read access for some top-level collections.
 *
 * Data Structure:
 * - User profiles and channels are stored in `/users/{userId}`.
 * - User wallets are stored in `/users/{userId}/wallet`.
 * - Transaction history for wallets are stored in `/users/{userId}/wallet/transactions/{transactionId}`.
 * - Tournaments are stored in `/tournaments/{tournamentId}`.
 * - Matches for tournaments are stored in `/tournaments/{tournamentId}/matches/{matchId}`.
 * - Participants are stored in `/participants/{participantId}`.
 * - Videos are stored in `/users/{userId}/videos/{videoId}`.
 * - Store items are stored in `/store_items/{storeItemId}`.
 * - Delivery addresses are stored in `/users/{userId}/delivery_addresses/{deliveryAddressId}`.
 * - Orders are stored in `/orders/{orderId}`.
 * - Chat messages are stored in `/chat_messages/{chatMessageId}`.
 * - Friendships are stored in `/friendships/{friendshipId}`.
 * - Leaderboards are stored in `/leaderboards/{leaderboardId}`.
 * - Leaderboard entries are stored in `/leaderboards/{leaderboardId}/entries/{leaderboardEntryId}`.
 * - Notifications are stored in `/users/{userId}/notifications/{notificationId}`.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Public read access is granted for tournaments and store items.
 * - Listing of the /users collection is denied due to privacy concerns, addressing the initial error.
 * - Transactions and Notifications can only be read by the user that owns them.
 *
 * Denormalization for Authorization:
 * - Wallet and Transaction documents include the 'userId' for simplified authorization.
 * - Match documents include the 'tournamentId' for simplified authorization.
 * - Participant documents include the 'userId' and 'tournamentId' for simplified authorization.
 * - DeliveryAddress documents include the 'userId' for simplified authorization.
 * - LeaderboardEntry documents include the 'leaderboardId' for simplified authorization.
 *
 * Structural Segregation:
 * - Public data (tournaments, store items) is stored in top-level collections, while private user data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their profile if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can access their profile if request.auth.uid == userId.
     * @deny (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create profile for 'differentUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own wallet data.
     * @path /users/{userId}/wallet
     * @allow (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their wallet if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can access their wallet if request.auth.uid == userId.
     * @deny (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create wallet for 'differentUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own transaction data.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create a transaction if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can access their transaction if request.auth.uid == userId.
     * @deny (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create transaction for 'differentUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read tournament data, but restricts creation, updates, and deletion.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) - Anyone can read tournament data.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can modify tournament data.
     * @principle Public read access with restricted writes.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) - Anyone can read match data.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can modify match data.
     * @principle Public read access with restricted writes.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts read and write access to participant data.
     * @path /participants/{participantId}
     * @deny (get, list, create, update, delete) - No access granted without specific authorization logic.
     * @principle Secure by default, requires specific access rules.
     */
    match /participants/{participantId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own video data.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create a video if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can access their video if request.auth.uid == userId.
     * @deny (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create video for 'differentUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read store item data, but restricts creation, updates, and deletion.
     * @path /store_items/{storeItemId}
     * @allow (get, list) - Anyone can read store item data.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can modify store item data.
     * @principle Public read access with restricted writes.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own delivery address data.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create a delivery address if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can access their delivery address if request.auth.uid == userId.
     * @deny (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create delivery address for 'differentUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts read and write access to order data.
     * @path /orders/{orderId}
     * @deny (get, list, create, update, delete) - No access granted without specific authorization logic.
     * @principle Secure by default, requires specific access rules.
     */
    match /orders/{orderId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts read and write access to chat message data.
     * @path /chat_messages/{chatMessageId}
     * @deny (get, list, create, update, delete) - No access granted without specific authorization logic.
     * @principle Secure by default, requires specific access rules.
     */
    match /chat_messages/{chatMessageId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts read and write access to friendship data.
     * @path /friendships/{friendshipId}
     * @deny (get, list, create, update, delete) - No access granted without specific authorization logic.
     * @principle Secure by default, requires specific access rules.
     */
    match /friendships/{friendshipId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to read leaderboard data, but restricts creation, updates, and deletion.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) - Anyone can read leaderboard data.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can modify leaderboard data.
     * @principle Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read leaderboard entry data, but restricts creation, updates, and deletion.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get, list) - Anyone can read leaderboard entry data.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can modify leaderboard entry data.
     * @principle Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own notification data.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create a notification if request.auth.uid == userId.
     * @allow (get, update, delete) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can access their notification if request.auth.uid == userId.
     * @deny (create) - User 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create notification for 'differentUserId'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}