rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.keys().size() > 0;
    }

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates a profile at /users/user123.
     * @deny (create) User with ID 'user123' tries to create a profile at /users/user456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces document ownership for user wallets.
     * @path /users/{userId}/wallet
     * @allow (create) User with ID 'user123' creates a wallet at /users/user123/wallet.
     * @deny (create) User with ID 'user123' tries to create a wallet at /users/user456/wallet.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces document ownership for user transactions.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User with ID 'user123' creates a transaction at /users/user123/wallet/transactions/tx123.
     * @deny (create) User with ID 'user123' tries to create a transaction at /users/user456/wallet/transactions/tx123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Allows public read access to tournaments, but restricts write access.
     * @path /tournaments/{tournamentId}
     * @allow (get) Any user can retrieve a tournament.
     * @allow (list) Any user can list tournaments.
     * @deny (create) Any user cannot create tournaments. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to matches, but restricts write access.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get) Any user can retrieve a match.
     * @allow (list) Any user can list matches.
     * @deny (create) Any user cannot create matches.  // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to participants, but restricts write access.
     * @path /participants/{participantId}
     * @allow (get) Any user can retrieve a participant.
     * @allow (list) Any user can list participants.
     * @deny (create) Any user cannot create participants. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces document ownership for user channels.
     * @path /users/{userId}/channel
     * @allow (create) User with ID 'user123' creates a channel at /users/user123/channel.
     * @deny (create) User with ID 'user123' tries to create a channel at /users/user456/channel.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/channel {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces document ownership for user videos.
     * @path /users/{userId}/channel/videos/{videoId}
     * @allow (create) User with ID 'user123' creates a video at /users/user123/channel/videos/video123.
     * @deny (create) User with ID 'user123' tries to create a video at /users/user456/channel/videos/video123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/channel/videos/{videoId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Allows public read access to store items, but restricts write access.
     * @path /store_items/{storeItemId}
     * @allow (get) Any user can retrieve a store item.
     * @allow (list) Any user can list store items.
     * @deny (create) Any user cannot create store items. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces document ownership for user delivery addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User with ID 'user123' creates a delivery address at /users/user123/delivery_addresses/address123.
     * @deny (create) User with ID 'user123' tries to create a delivery address at /users/user456/delivery_addresses/address123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Allows public read access to orders, but restricts write access.
     * @path /orders/{orderId}
     * @allow (get) Any user can retrieve an order.
     * @allow (list) Any user can list orders.
     * @deny (create) Any user cannot create orders. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to chat messages, but restricts write access.
     * @path /chat_messages/{chatMessageId}
     * @allow (get) Any user can retrieve a chat message.
     * @allow (list) Any user can list chat messages.
     * @deny (create) Any user cannot create chat messages. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to friendships, but restricts write access.
     * @path /friendships/{friendshipId}
     * @allow (get) Any user can retrieve a friendship.
     * @allow (list) Any user can list friendships.
     * @deny (create) Any user cannot create friendships. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to leaderboards, but restricts write access.
     * @path /leaderboards/{leaderboardId}
     * @allow (get) Any user can retrieve a leaderboard.
     * @allow (list) Any user can list leaderboards.
     * @deny (create) Any user cannot create leaderboards. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to leaderboard entries, but restricts write access.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get) Any user can retrieve a leaderboard entry.
     * @allow (list) Any user can list leaderboard entries.
     * @deny (create) Any user cannot create leaderboard entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces document ownership for user notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with ID 'user123' creates a notification at /users/user123/notifications/notification123.
     * @deny (create) User with ID 'user123' tries to create a notification at /users/user456/notifications/notification123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }
  }
}