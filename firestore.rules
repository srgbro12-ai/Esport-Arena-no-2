/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and related data,
 * and provides public read access to top-level collections where write access is owner-controlled.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, owned by the user with matching UID.
 * - /users/{userId}/wallet: Stores wallet information for a specific user, accessible only by the user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history for a user's wallet, accessible only by the user.
 * - /tournaments/{tournamentId}: Stores tournament information; create, update, delete not defined in requirements.
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match information for a specific tournament; create, update, delete not defined in requirements.
 * - /participants/{participantId}: Stores participant information.
 * - /users/{userId}/videos/{videoId}: Stores video information for a user's channel, owned by the user.
 * - /store_items/{storeItemId}: Stores store item information; create, update, delete not defined in requirements.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery addresses for a user, accessible only by the user.
 * - /orders/{orderId}: Stores order information, accessible only by the user who placed the order.
 * - /chat_messages/{chatMessageId}: Stores chat messages between users.
 * - /friendships/{friendshipId}: Stores friendship relationships between users.
 * - /leaderboards/{leaderboardId}: Stores leaderboard information.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries for a specific leaderboard.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is denied to protect user privacy.
 * - Strict ownership is enforced for all user-related data.
 * - Data shapes are not validated in this prototyping phase, except where needed for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the profile at /users/user123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for user wallets. Only the user can read/write their own wallet.
     * @path /users/{userId}/wallet
     * @allow (create) User with UID 'user123' can create their wallet at /users/user123/wallet.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their wallet at /users/user123/wallet.
     * @deny (create) User with UID 'user456' cannot create a wallet at /users/user123/wallet.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the wallet at /users/user123/wallet.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/wallet {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;

    }

    /**
     * @description Enforces user-ownership for transaction. Only the user can read/write their own transaction.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create their transaction at /users/user123/wallet/transactions/tx1.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their transaction at /users/user123/wallet/transactions/tx1.
     * @deny (create) User with UID 'user456' cannot create a transaction at /users/user123/wallet/transactions/tx1.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the transaction at /users/user123/wallet/transactions/tx1.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read tournament information, but restricts writes.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) Anyone can read tournament information.
     * @deny (create, update, delete) No write permissions defined for tournaments.
     * @principle Public read access with restricted writes.
     */
    match /tournaments/{tournamentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read match information, but restricts writes.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) Anyone can read match information.
     * @deny (create, update, delete) No write permissions defined for matches.
     * @principle Public read access with restricted writes.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read participant information, but restricts writes.
     * @path /participants/{participantId}
     * @allow (get, list) Anyone can read participant information.
     * @deny (create, update, delete) No write permissions defined for participants.
     * @principle Public read access with restricted writes.
     */
    match /participants/{participantId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for videos. Only the user can read/write their own videos.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) User with UID 'user123' can create their video at /users/user123/videos/video1.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their video at /users/user123/videos/video1.
     * @deny (create) User with UID 'user456' cannot create a video at /users/user123/videos/video1.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the video at /users/user123/videos/video1.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/videos/{videoId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read store item information, but restricts writes.
     * @path /store_items/{storeItemId}
     * @allow (get, list) Anyone can read store item information.
     * @deny (create, update, delete) No write permissions defined for store items.
     * @principle Public read access with restricted writes.
     */
    match /store_items/{storeItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for delivery addresses. Only the user can read/write their own delivery addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User with UID 'user123' can create their delivery address at /users/user123/delivery_addresses/address1.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their delivery address at /users/user123/delivery_addresses/address1.
     * @deny (create) User with UID 'user456' cannot create a delivery address at /users/user123/delivery_addresses/address1.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the delivery address at /users/user123/delivery_addresses/address1.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read order information, but restricts writes.
     * @path /orders/{orderId}
     * @allow (get, list) Anyone can read order information.
     * @deny (create, update, delete) No write permissions defined for orders.
     * @principle Public read access with restricted writes.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read chat message information, but restricts writes.
     * @path /chat_messages/{chatMessageId}
     * @allow (get, list) Anyone can read chat message information.
     * @deny (create, update, delete) No write permissions defined for chat messages.
     * @principle Public read access with restricted writes.
     */
    match /chat_messages/{chatMessageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read friendship information, but restricts writes.
     * @path /friendships/{friendshipId}
     * @allow (get, list) Anyone can read friendship information.
     * @deny (create, update, delete) No write permissions defined for friendships.
     * @principle Public read access with restricted writes.
     */
    match /friendships/{friendshipId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read leaderboard information, but restricts writes.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) Anyone can read leaderboard information.
     * @deny (create, update, delete) No write permissions defined for leaderboards.
     * @principle Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read leaderboard entry information, but restricts writes.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get, list) Anyone can read leaderboard entry information.
     * @deny (create, update, delete) No write permissions defined for leaderboard entries.
     * @principle Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for notifications. Only the user can read/write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user123' can create their notification at /users/user123/notifications/notification1.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their notification at /users/user123/notifications/notification1.
     * @deny (create) User with UID 'user456' cannot create a notification at /users/user123/notifications/notification1.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the notification at /users/user123/notifications/notification1.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}