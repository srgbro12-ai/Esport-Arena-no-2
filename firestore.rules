/**
 * @file firestore.rules
 * @description Firestore Security Rules for the Esport Arena application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and a public-read, owner-write model for top-level collections like tournaments and store items.
 *
 * Data Structure:
 * - User profiles and associated data (wallets, channels, delivery addresses, notifications) are nested under /users/{userId}.
 * - Tournaments and store items are stored in top-level collections (/tournaments, /store_items).
 * - Chat messages and friendships are stored in top-level collections (/chat_messages, /friendships).
 * - Leaderboards are stored in a top-level collection (/leaderboards) with entries in subcollections.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Public read access is granted to tournaments and store items, but writes are restricted (TODO: currently not restricted).
 * - Denormalization of userId is used within subcollections to avoid costly `get()` calls and enforce authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own wallet data.
     * @path /users/{userId}/wallet
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own transaction data within their wallet.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes, inheriting ownership from the parent wallet.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read tournament data, but restricts creation, updates, and deletion.
     * @path /tournaments/{tournamentId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read, owner-only write (TODO: Implement owner-only write).
     */
    match /tournaments/{tournamentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read match data within a tournament, but restricts creation, updates, and deletion.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read, owner-only write (TODO: Implement owner-only write).
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to participants, but only if the user is the participant.
     * @path /participants/{participantId}
     * @allow (create, update, delete, get, list) if request.auth.uid == resource.data.userId
     * @deny (create, update, delete, get, list) if request.auth.uid != resource.data.userId
     * @principle Enforces that only the user can access their participant data.
     */
    match /participants/{participantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows users to read and write their own channel data.
     * @path /users/{userId}/channel
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/channel {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own video data within their channel.
     * @path /users/{userId}/channel/videos/{videoId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes, inheriting ownership from the parent channel.
     */
    match /users/{userId}/channel/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read store item data, but restricts creation, updates, and deletion.
     * @path /store_items/{storeItemId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Public read, owner-only write (TODO: Implement owner-only write).
     */
    match /store_items/{storeItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows users to read and write their own delivery address data.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.userId == request.resource.data.userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read order data, but restricts creation, updates, and deletion to the user who owns the order.
     * @path /orders/{orderId}
     * @allow get, list: if true
     * @deny create, update, delete: if request.auth.uid != resource.data.userId
     * @principle Owner-only write, public read.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == resource.data.userId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.userId == resource.data.userId && resource != null;
    }

    /**
     * @description Allows read and write access to chat messages.
     * @path /chat_messages/{chatMessageId}
     */
    match /chat_messages/{chatMessageId} {
       allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows read and write access to friendships.
     * @path /friendships/{friendshipId}
     */
    match /friendships/{friendshipId} {
       allow get, list, create, update, delete: if true;
    }

     /**
      * @description Allows read access to leaderboards. Creation, updates, and deletion are restricted.
      * @path /leaderboards/{leaderboardId}
      * @allow get, list: if true
      * @deny create, update, delete: if true
      * @principle Public read.
      */
    match /leaderboards/{leaderboardId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows read and write access to leaderboard entries for a specific leaderboard.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
       allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows users to read and write their own notification data.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}