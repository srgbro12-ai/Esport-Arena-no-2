/**
 * @file Firestore Security Rules for Esport Arena.
 *
 * @Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data, with public read access for some top-level collections and owner-only write access.  Data required for authorization decisions is denormalized onto the secured documents to avoid costly `get()` calls.
 *
 * @Data Structure:
 * - User profiles and related data (wallets, channels, delivery addresses, notifications) are nested under `/users/{userId}`.
 * - Tournaments, store items, chat messages, friendships, and leaderboards are stored in top-level collections.
 * - Matches are nested under `/tournaments/{tournamentId}/matches` and leaderboard entries under `/leaderboards/{leaderboardId}/entries`.
 * - Orders are stored in the top level, but contain denormalized `userId` fields for filtering.
 *
 * @Key Security Decisions:
 * - User listing is generally disallowed.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * - Data types are not validated, but existence and ownership of key relationships are.
 *
 * @Denormalization for Authorization:
 * - Wallet, Channel, DeliveryAddress, and Order documents store the userId for authorization independence.
 * - Match documents store the tournamentId.
 * - Participant documents store both userId and tournamentId.
 * - Video documents store the channelId.
 * - LeaderboardEntry documents store the leaderboardId.
 *
 * @Structural Segregation:
 * - User-owned data (e.g., profiles, wallets, notifications) is stored under `/users/{userId}` for clear ownership.
 * - Public or shared data (e.g., tournaments, store items) resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Allows a user to read and write their own profile data.
     * @path: /users/{userId}
     * @allow: (create) User with UID 'user_abc' can create a profile with document ID 'user_abc'.
     * @allow: (get, update, delete) User with UID 'user_abc' can read, update, and delete their own profile at /users/user_abc.
     * @deny: (create) User with UID 'user_xyz' cannot create a profile with document ID 'user_abc'.
     * @deny: (get, update, delete) User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Allows a user to read and write their own wallet data.
     * @path: /users/{userId}/wallet
     * @allow: (create, get, update, delete) User with UID 'user_abc' can create/read/update/delete their own wallet at /users/user_abc/wallet.
     * @deny: (create, get, update, delete) User with UID 'user_xyz' cannot create/read/update/delete the wallet at /users/user_abc/wallet.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Wallets are not listable.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Allows a user to read and write their own transaction data within their wallet.
     * @path: /users/{userId}/wallet/transactions/{transactionId}
     * @allow: (create, get, update, delete) User with UID 'user_abc' can create/read/update/delete transactions within their own wallet.
     * @deny: (create, get, update, delete) User with UID 'user_xyz' cannot create/read/update/delete transactions within user_abc's wallet.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Allows anyone to read tournament data, but restricts writes.
     * @path: /tournaments/{tournamentId}
     * @allow: (get, list) Any user can read tournament data.
     * @deny: (create, update, delete) No user can create, update, or delete tournament data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /tournaments/{tournamentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows anyone to read match data within a tournament, but restricts writes.
     * @path: /tournaments/{tournamentId}/matches/{matchId}
     * @allow: (get, list) Any user can read match data.
     * @deny: (create, update, delete) No user can create, update, or delete match data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows anyone to read participant data, but restricts writes.
     * @path: /participants/{participantId}
     * @allow: (get, list) Any user can read participant data.
     * @deny: (create, update, delete) No user can create, update, or delete participant data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /participants/{participantId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows a user to read and write their own channel data.
     * @path: /users/{userId}/channel
     * @allow: (create, get, update, delete) User with UID 'user_abc' can create/read/update/delete their own channel.
     * @deny: (create, get, update, delete) User with UID 'user_xyz' cannot create/read/update/delete channel of user_abc.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/channel {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }


      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Allows a user to read and write their own video data within their channel.
     * @path: /users/{userId}/channel/videos/{videoId}
     * @allow: (create, get, update, delete) User with UID 'user_abc' can create/read/update/delete videos within their own channel.
     * @deny: (create, get, update, delete) User with UID 'user_xyz' cannot create/read/update/delete videos within user_abc's channel.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/channel/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Allows anyone to read store item data, but restricts writes.
     * @path: /store_items/{storeItemId}
     * @allow: (get, list) Any user can read store item data.
     * @deny: (create, update, delete) No user can create, update, or delete store item data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /store_items/{storeItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows a user to read and write their own delivery address data.
     * @path: /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow: (create, get, update, delete) User with UID 'user_abc' can create/read/update/delete their own delivery address.
     * @deny: (create, get, update, delete) User with UID 'user_xyz' cannot create/read/update/delete delivery address of user_abc.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description: Allows anyone to read order data, but restricts writes to the owner.
     * @path: /orders/{orderId}
     * @allow: (get, list) Any user can read the order data.
     * @deny: (create, update, delete) No user can create, update, or delete order data without being the owner.
     * @principle: Public read access with restricted writes.
     */
    match /orders/{orderId} {
     function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner() {
        return isSignedIn() && isOwner(resource.data.userId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description: Allows anyone to read chat message data, but restricts writes.
     * @path: /chat_messages/{chatMessageId}
     * @allow: (get, list) Any user can read chat message data.
     * @deny: (create, update, delete) No user can create, update, or delete chat message data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /chat_messages/{chatMessageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows anyone to read friendship data, but restricts writes.
     * @path: /friendships/{friendshipId}
     * @allow: (get, list) Any user can read friendship data.
     * @deny: (create, update, delete) No user can create, update, or delete friendship data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /friendships/{friendshipId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows anyone to read leaderboard data, but restricts writes.
     * @path: /leaderboards/{leaderboardId}
     * @allow: (get, list) Any user can read leaderboard data.
     * @deny: (create, update, delete) No user can create, update, or delete leaderboard data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows anyone to read leaderboard entry data within a leaderboard, but restricts writes.
     * @path: /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow: (get, list) Any user can read leaderboard entry data.
     * @deny: (create, update, delete) No user can create, update, or delete leaderboard entry data without specific authorization logic.
     * @principle: Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Allows a user to read and write their own notification data.
     * @path: /users/{userId}/notifications/{notificationId}
     * @allow: (create, get, update, delete) User with UID 'user_abc' can create/read/update/delete their own notifications.
     * @deny: (create, get, update, delete) User with UID 'user_xyz' cannot create/read/update/delete notifications of user_abc.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}