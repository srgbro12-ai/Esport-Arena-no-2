rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create a profile document where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document where userId == 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own profile (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own wallet.
     * @path /users/{userId}/wallet
     * @allow (create) User with UID 'user_abc' can create a wallet document under their user ID where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a wallet document under user 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own wallet (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the wallet of user 'user_abc'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage transactions in their own wallet.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User with UID 'user_abc' can create a transaction document under their wallet where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a transaction document under user 'user_abc''s wallet.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own transaction (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the transaction of user 'user_abc'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to tournament information. Write access is denied.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) Any user can read tournament information.
     * @deny (create, update, delete) No user can create, update, or delete tournament information.
     * @principle Grants public read access while restricting write access.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match information within a tournament. Write access is denied.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) Any user can read match information for a tournament.
     * @deny (create, update, delete) No user can create, update, or delete match information.
     * @principle Grants public read access while restricting write access.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows management of participant information.
     * @path /participants/{participantId}
     * @allow (get, list) Any user can read participant information.
     * @allow (create) Any authenticated user can create a participant document.
     * @allow (update, delete) No user can update or delete participant information.
     */
    match /participants/{participantId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own channel.
     * @path /users/{userId}/channel
     * @allow (create) User with UID 'user_abc' can create a channel document under their user ID where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a channel document under user 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own channel (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the channel of user 'user_abc'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/channel {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage videos in their own channel.
     * @path /users/{userId}/channel/videos/{videoId}
     * @allow (create) User with UID 'user_abc' can create a video document under their channel where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a video document under user 'user_abc''s channel.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own video (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the video of user 'user_abc'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/channel/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to store item information. Write access is denied.
     * @path /store_items/{storeItemId}
     * @allow (get, list) Any user can read store item information.
     * @deny (create, update, delete) No user can create, update, or delete store item information.
     * @principle Grants public read access while restricting write access.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own delivery addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User with UID 'user_abc' can create a delivery address document under their user ID where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a delivery address document under user 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own delivery address (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the delivery address of user 'user_abc'.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows management of order information.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows management of chat messages.
     * @path /chat_messages/{chatMessageId}
     */
    match /chat_messages/{chatMessageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows management of friendship information.
     * @path /friendships/{friendshipId}
     */
    match /friendships/{friendshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to leaderboard information. Write access is denied.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) Any user can read leaderboard information.
     * @deny (create, update, delete) No user can create, update, or delete leaderboard information.
     * @principle Grants public read access while restricting write access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows management of leaderboard entries for a specific leaderboard.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user_abc' can create a notification document under their user ID where userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a notification document under user 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, and delete their own notification (userId == 'user_abc').
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete the notification of user 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}