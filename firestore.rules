/**
 * @fileoverview Firestore Security Rules for the Esport Arena application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * (profiles, wallets, delivery addresses, videos, notifications) while allowing
 * broader read access to public content (tournaments, store items, leaderboards).
 * Write access is generally restricted to the owner of the data or, in some
 * cases, entirely denied to prevent unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile and channel information.
 * - /users/{userId}/wallet: Stores wallet information for a user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history for a user's wallet.
 * - /tournaments/{tournamentId}: Stores tournament information.
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match information for a specific tournament.
 * - /participants/{participantId}: Stores participant information.
 * - /users/{userId}/videos/{videoId}: Stores video information for a user's channel.
 * - /store_items/{storeItemId}: Stores store item information.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery addresses for a user.
 * - /orders/{orderId}: Stores order information.
 * - /chat_messages/{chatMessageId}: Stores chat messages between users.
 * - /friendships/{friendshipId}: Stores friendship relationships between users.
 * - /leaderboards/{leaderboardId}: Stores leaderboard information.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries for a specific leaderboard.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user ID in the path.
 * - Write operations on user-owned resources require a valid user ID and
 *   ownership verification.
 * - Certain top-level collections (e.g., tournaments, store_items, leaderboards)
 *   are publicly readable.
 * - Listing of user subcollections is generally allowed for the owner, unless
 *   explicitly denied.
 * - The `orders` collection is top-level to allow for global querying.
 *
 * Denormalization for Authorization:
 * - Wallet and Transaction documents denormalize the userId from the parent
 *   UserProfile document to allow for independent authorization checks.
 * - Match documents denormalize the tournamentId from the parent
 *   Tournament document to allow for independent authorization checks.
 * - Participant documents denormalize the userId and tournamentId to allow for independent authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows signed-in users to list videos temporarily due to a client-side bug.
     * @path /videos
     * @allow (list) User is signed in.
     * @deny (list) User is not signed in.
     * @principle Allows listing only for signed in user.
     */
    match /videos/{videoId} {
      allow get: if false;
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user profile data. Enforces ownership for all write operations.
     * @path /users/{userId}
     * @allow (get) Any signed-in user can read a profile.
     * @allow (create) User can create their own profile if the userId matches their auth UID.
     * @allow (update) User can update their own profile if the userId matches their auth UID.
     * @allow (delete) User can delete their own profile if the userId matches their auth UID.
     * @deny (create) User tries to create a profile with a mismatched userId.
     * @deny (update) User tries to update someone else's profile.
     * @deny (delete) User tries to delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user wallet data. Enforces ownership for all write operations.
     * @path /users/{userId}/wallet
     * @allow (get) Any signed-in user can read the wallet.
     * @allow (create) User can create their own wallet if the userId matches their auth UID.
     * @allow (update) User can update their own wallet if the userId matches their auth UID.
     * @allow (delete) User can delete their own wallet if the userId matches their auth UID.
     * @deny (create) User tries to create a wallet with a mismatched userId.
     * @deny (update) User tries to update someone else's wallet.
     * @deny (delete) User tries to delete someone else's wallet.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages transaction history for a user's wallet. Enforces ownership for all write operations.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (get) Any signed-in user can read a transaction.
     * @allow (list) The owner can list their own transactions.
     * @allow (create) User can create their own transaction if the userId matches their auth UID.
     * @allow (update) User can update their own transaction if the userId matches their auth UID.
     * @allow (delete) User can delete their own transaction if the userId matches their auth UID.
     * @deny (create) User tries to create a transaction with a mismatched userId.
     * @deny (update) User tries to update someone else's transaction.
     * @deny (delete) User tries to delete someone else's transaction.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages tournament information. Allows public read access.
     * @path /tournaments/{tournamentId}
     * @allow (get) Any user can read tournament information.
     * @allow (list) Any user can list tournaments.
     * @deny (create) No one can create tournaments through the client.
     * @deny (update) No one can update tournaments through the client.
     * @deny (delete) No one can delete tournaments through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages match information for a specific tournament. Allows public read access.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get) Any user can read match information.
     * @allow (list) Any user can list matches.
     * @deny (create) No one can create matches through the client.
     * @deny (update) No one can update matches through the client.
     * @deny (delete) No one can delete matches through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages participant information.
     * @path /participants/{participantId}
     * @allow (get) Any signed-in user can read participant information.
     * @allow (list) Any signed-in user can list participants.
     * @deny (create) No one can create participants through the client.
     * @deny (update) No one can update participants through the client.
     * @deny (delete) No one can delete participants through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /participants/{participantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages video information for a user's channel. Enforces ownership for all write operations.
     * @path /users/{userId}/videos/{videoId}
     * @allow (get) Any signed-in user can read a video.
     * @allow (list) The owner can list their own videos.
     * @allow (create) User can create their own video if the userId matches their auth UID.
     * @allow (update) User can update their own video if the userId matches their auth UID.
     * @allow (delete) User can delete their own video if the userId matches their auth UID.
     * @deny (create) User tries to create a video with a mismatched userId.
     * @deny (update) User tries to update someone else's video.
     * @deny (delete) User tries to delete someone else's video.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/videos/{videoId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages store item information. Allows public read access.
     * @path /store_items/{storeItemId}
     * @allow (get) Any user can read store item information.
     * @allow (list) Any user can list store items.
     * @deny (create) No one can create store items through the client.
     * @deny (update) No one can update store items through the client.
     * @deny (delete) No one can delete store items through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages delivery addresses for a user. Enforces ownership for all write operations.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (get) Any signed-in user can read a delivery address.
     * @allow (list) The owner can list their own delivery addresses.
     * @allow (create) User can create their own delivery address if the userId matches their auth UID.
     * @allow (update) User can update their own delivery address if the userId matches their auth UID.
     * @allow (delete) User can delete their own delivery address if the userId matches their auth UID.
     * @deny (create) User tries to create a delivery address with a mismatched userId.
     * @deny (update) User tries to update someone else's delivery address.
     * @deny (delete) User tries to delete someone else's delivery address.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages order information. Allows signed-in users read access.
     * @path /orders/{orderId}
     * @allow (get) Any signed-in user can read order information.
     * @allow (list) Any signed-in user can list order information.
     * @deny (create) No one can create orders through the client.
     * @deny (update) No one can update orders through the client.
     * @deny (delete) No one can delete orders through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages chat messages between users.
     * @path /chat_messages/{chatMessageId}
     * @allow (get) Any signed-in user can read a chat message.
     * @allow (list) Any signed-in user can list chat messages.
     * @deny (create) No one can create chat messages through the client.
     * @deny (update) No one can update chat messages through the client.
     * @deny (delete) No one can delete chat messages through the client.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages friendship relationships between users.
     * @path /friendships/{friendshipId}
     * @allow (get) Any signed-in user can read a friendship.
     * @allow (list) Any signed-in user can list friendships.
     * @deny (create) No one can create friendships through the client.
     * @deny (update) No one can update friendships through the client.
     * @deny (delete) No one can delete friendships through the client.
     */
    match /friendships/{friendshipId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages leaderboard information. Allows public read access.
     * @path /leaderboards/{leaderboardId}
     * @allow (get) Any user can read leaderboard information.
     * @allow (list) Any user can list leaderboards.
     * @deny (create) No one can create leaderboards through the client.
     * @deny (update) No one can update leaderboards through the client.
     * @deny (delete) No one can delete leaderboards through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages leaderboard entries for a specific leaderboard. Allows public read access.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get) Any user can read a leaderboard entry.
     * @allow (list) Any user can list leaderboard entries.
     * @deny (create) No one can create leaderboard entries through the client.
     * @deny (update) No one can update leaderboard entries through the client.
     * @deny (delete) No one can delete leaderboard entries through the client.
     * @principle Allows public read access, denies client-side write access.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages notifications for a user. Enforces ownership for all write operations.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (get) Any signed-in user can read a notification.
     * @allow (list) The owner can list their own notifications.
     * @allow (create) User can create their own notification if the userId matches their auth UID.
     * @allow (update) User can update their own notification if the userId matches their auth UID.
     * @allow (delete) User can delete their own notification if the userId matches their auth UID.
     * @deny (create) User tries to create a notification with a mismatched userId.
     * @deny (update) User tries to update someone else's notification.
     * @deny (delete) User tries to delete someone else's notification.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the EXISTING document
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
}