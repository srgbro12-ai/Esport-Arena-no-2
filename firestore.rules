/**
 * @file Firebase Security Rules for Esport Arena.
 *
 * @Core Philosophy:
 * This ruleset enforces a user-ownership model for profile data and related subcollections,
 * while allowing public read access to certain collections like tournaments and store items.
 * The primary goal is to protect user data while enabling a degree of discoverability and community engagement.
 *
 * @Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/wallet: User's wallet, owned by the user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Transaction history for a user's wallet, owned by the user.
 * - /tournaments/{tournamentId}: Public tournament data.
 * - /tournaments/{tournamentId}/matches/{matchId}: Public match data for tournaments.
 * - /participants/{participantId}: Participant data, requires validation of both userId and tournamentId on writes.
 * - /users/{userId}/videos/{videoId}: User's videos, owned by the user.
 * - /store_items/{storeItemId}: Public store items.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: User's delivery addresses, owned by the user.
 * - /orders/{orderId}: Orders, readable and writable by any authenticated user.
 * - /chat_messages/{chatMessageId}: Chat messages, accessible to any authenticated user.
 * - /friendships/{friendshipId}: Friendship relationships between users, accessible to any authenticated user.
 * - /leaderboards/{leaderboardId}: Public leaderboard data.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Public leaderboard entry data.
 * - /users/{userId}/notifications/{notificationId}: User's notifications, owned by the user.
 *
 * @Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Public read access is granted to tournaments, store items, and leaderboards to encourage community participation and discoverability.
 * - Read and write access to orders, chat messages, and friendships is granted to any authenticated user.
 * - The 'participants' collection requires a valid 'userId' and 'tournamentId' during creation, ensuring integrity.
 *
 * @Denormalization for Authorization:
 * - The 'Wallet' subcollection denormalizes 'userId' to allow direct ownership checks.
 * - The 'Transaction' subcollection denormalizes 'userId' from the parent 'wallet' document for independent authorization.
 * - The 'Match' subcollection denormalizes 'tournamentId' for authorization independence.
 * - The 'Participant' collection denormalizes both 'userId' and 'tournamentId' to facilitate efficient rules.
 * - The 'DeliveryAddress' subcollection denormalizes 'userId' for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read their own profile and create their profile if not exists. Only owner can update/delete.
     * @path /users/{userId}
     * @allow (read) Signed-in user can read any profile.
     * @allow (create) Signed-in user can create own profile.
     * @allow (update) Signed-in owner can update their own profile.
     * @allow (delete) Signed-in owner can delete their own profile.
     * @deny (create) If not signed in.
     * @deny (update) If not signed in or not the owner.
     * @deny (delete) If not signed in or not the owner.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own wallet data.
     * @path /users/{userId}/wallet
     * @allow (read) Owner can read their wallet.
     * @allow (create) Owner can create their wallet.
     * @allow (update) Owner can update their wallet.
     * @allow (delete) Owner can delete their wallet.
     * @deny (create) If not signed in or not the owner.
     * @deny (update) If not signed in or not the owner.
     * @deny (delete) If not signed in or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own transaction data within their wallet.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (read) Owner can read their wallet transactions.
     * @allow (create) Owner can create their wallet transactions.
     * @allow (update) Owner can update their wallet transactions.
     * @allow (delete) Owner can delete their wallet transactions.
     * @deny (create) If not signed in or not the owner.
     * @deny (update) If not signed in or not the owner.
     * @deny (delete) If not signed in or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read tournament data, but restricts creation, updating, and deletion.
     * @path /tournaments/{tournamentId}
     * @allow (read) Any user can read tournament data.
     * @deny (create) No user can create tournament data through the client.
     * @deny (update) No user can update tournament data through the client.
     * @deny (delete) No user can delete tournament data through the client.
     * @principle Public read access with restricted writes.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read match data within a tournament, but restricts creation, updating, and deletion.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (read) Any user can read match data.
     * @deny (create) No user can create match data through the client.
     * @deny (update) No user can update match data through the client.
     * @deny (delete) No user can delete match data through the client.
     * @principle Public read access with restricted writes.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows create only if userId and tournamentId matches document and update, delete not allowd.
     * @path /participants/{participantId}
     * @allow (create) Any signed-in user can create a participant entry if the userId and tournamentId match.
     * @deny (read) Listing is disabled.
     * @deny (update) Updates are disabled.
     * @deny (delete) Deletes are disabled.
     * @principle  Enforces relationships by validating 'userId' and 'tournamentId' on create.
     */
    match /participants/{participantId} {
        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId != null && request.resource.data.tournamentId != null;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own video data.
     * @path /users/{userId}/videos/{videoId}
     * @allow (read) Signed-in user can read any video.
     * @allow (list) Signed-in user can list any video.
     * @allow (create) Signed-in owner can create their own video.
     * @allow (update) Signed-in owner can update their own video.
     * @allow (delete) Signed-in owner can delete their own video.
     * @deny (create) If not signed in or not the owner.
     * @deny (update) If not signed in or not the owner.
     * @deny (delete) If not signed in or not the owner.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId}/videos/{videoId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read store item data, but restricts creation, updating, and deletion.
     * @path /store_items/{storeItemId}
     * @allow (read) Any user can read store item data.
     * @deny (create) No user can create store item data through the client.
     * @deny (update) No user can update store item data through the client.
     * @deny (delete) No user can delete store item data through the client.
     * @principle Public read access with restricted writes.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own delivery address data.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (read) Owner can read their delivery addresses.
     * @allow (create) Owner can create their delivery addresses.
     * @allow (update) Owner can update their delivery addresses.
     * @allow (delete) Owner can delete their delivery addresses.
     * @deny (create) If not signed in or not the owner.
     * @deny (update) If not signed in or not the owner.
     * @deny (delete) If not signed in or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create, read, update and delete orders.
     * @path /orders/{orderId}
     * @allow (read) Any signed-in user can read order data.
     * @allow (create) Any signed-in user can create order data.
     * @allow (update) Any signed-in user can update order data.
     * @allow (delete) Any signed-in user can delete order data.
     * @principle Open access for authenticated users.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete chat messages.
     * @path /chat_messages/{chatMessageId}
     * @allow (read) Any signed-in user can read chat messages.
     * @allow (create) Any signed-in user can create chat messages.
     * @allow (update) Any signed-in user can update chat messages.
     * @allow (delete) Any signed-in user can delete chat messages.
     * @principle Open access for authenticated users.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to create, read, update, and delete friendship relationships.
     * @path /friendships/{friendshipId}
     * @allow (read) Any signed-in user can read friendship relationships.
     * @allow (create) Any signed-in user can create friendship relationships.
     * @allow (update) Any signed-in user can update friendship relationships.
     * @allow (delete) Any signed-in user can delete friendship relationships.
     * @principle Open access for authenticated users.
     */
    match /friendships/{friendshipId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read leaderboard data, but restricts creation, updating, and deletion.
     * @path /leaderboards/{leaderboardId}
     * @allow (read) Any user can read leaderboard data.
     * @deny (create) No user can create leaderboard data through the client.
     * @deny (update) No user can update leaderboard data through the client.
     * @deny (delete) No user can delete leaderboard data through the client.
     * @principle Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read leaderboard entry data, but restricts creation, updating, and deletion.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (read) Any user can read leaderboard entry data.
     * @deny (create) No user can create leaderboard entry data through the client.
     * @deny (update) No user can update leaderboard entry data through the client.
     * @deny (delete) No user can delete leaderboard entry data through the client.
     * @principle Public read access with restricted writes.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own notification data.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (read) Owner can read their notification.
     * @allow (list) Owner can list their notifications.
     * @allow (create) Owner can create their notifications.
     * @allow (update) Owner can update their notifications.
     * @allow (delete) Owner can delete their notifications.
     * @deny (create) If not signed in or not the owner.
     * @deny (update) If not signed in or not the owner.
     * @deny (delete) If not signed in or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}