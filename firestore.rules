/**
 * @fileoverview Firestore Security Rules for Esport Arena.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * associated data like wallets, videos, delivery addresses, and notifications.
 * Other data, such as tournaments, store items, chat messages, friendships,
 * leaderboards, and orders, have looser controls, but all writes are still
 * protected.
 *
 * Data Structure:
 * - User profiles and their associated data are nested under /users/{userId}.
 * - Other data (tournaments, store items, chat messages, friendships, leaderboards, orders) resides in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile and associated data.
 * - Listing of all users is denied.
 * - Validation of data is relaxed in the prototyping phase.
 *
 * Denormalization for Authorization:
 * - Wallet, Transaction, DeliveryAddress, and Order documents store the userId
 *   to enable direct ownership checks without needing to query parent documents.
 *
 * Structural Segregation:
 * - No separation of private/public data via subcollections is used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing document.
     * @param {string} userId - The user ID to compare against the document's owner ID.
     * @returns {boolean} True if the request is made by the owner of an existing document, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profiles and channel information.
     * @path /users/{userId}
     * @allow (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their own profile.
     * @allow (get) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can read their own profile.
     * @allow (update) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can update their own profile.
     * @allow (delete) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can delete their own profile.
     * @deny (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create another user's profile (userId !== auth.uid).
     * @deny (get) User with UID 'randomId' cannot read user with ID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43'.
     * @deny (list) Anyone cannot list all users.
     * @principle Enforces document ownership for writes and restricts listing of user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for user's wallet information.
     * @path /users/{userId}/wallet
     * @allow (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their own wallet.
     * @allow (get) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can read their own wallet.
     * @allow (update) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can update their own wallet.
     * @allow (delete) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can delete their own wallet.
     * @deny (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create another user's wallet (userId !== auth.uid).
     * @deny (get) User with UID 'randomId' cannot read wallet of user with ID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for transaction history for a user's wallet.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create a transaction in their own wallet.
     * @allow (get) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can read a transaction in their own wallet.
     * @allow (update) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can update a transaction in their own wallet.
     * @allow (delete) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can delete a transaction in their own wallet.
     * @deny (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create a transaction in another user's wallet (userId !== auth.uid).
     * @deny (get) User with UID 'randomId' cannot read a transaction in wallet of user with ID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for tournament information.
     * @path /tournaments/{tournamentId}
     * @allow (get) Anyone can read tournament information.
     * @allow (list) Anyone can list tournaments.
     * @deny (create) No one can create tournaments. // TODO: Add admin validation once roles are defined.
     * @deny (update) No one can update tournaments. // TODO: Add admin validation once roles are defined.
     * @deny (delete) No one can delete tournaments. // TODO: Add admin validation once roles are defined.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once roles are defined.
      allow update: if false; // TODO: Add admin validation once roles are defined.
      allow delete: if false; // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Rule for match information for a specific tournament.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get) Anyone can read match information.
     * @allow (list) Anyone can list matches.
     * @deny (create) No one can create matches. // TODO: Add admin validation once roles are defined.
     * @deny (update) No one can update matches. // TODO: Add admin validation once roles are defined.
     * @deny (delete) No one can delete matches. // TODO: Add admin validation once roles are defined.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once roles are defined.
      allow update: if false; // TODO: Add admin validation once roles are defined.
      allow delete: if false; // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Rule for participant information.
     * @path /participants/{participantId}
     * @allow (get) Anyone can read participant information.
     * @allow (list) Anyone can list participants.
     * @deny (create) No one can create participants. // TODO: Add validation once roles are defined.
     * @deny (update) No one can update participants. // TODO: Add validation once roles are defined.
     * @deny (delete) No one can delete participants. // TODO: Add validation once roles are defined.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation once roles are defined.
      allow update: if false; // TODO: Add validation once roles are defined.
      allow delete: if false; // TODO: Add validation once roles are defined.
    }

    /**
     * @description Rule for video information for a user's channel.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their own video.
     * @allow (get) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can read their own video.
     * @allow (update) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can update their own video.
     * @allow (delete) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can delete their own video.
     * @deny (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create another user's video (userId !== auth.uid).
     * @deny (get) User with UID 'randomId' cannot read video of user with ID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/videos/{videoId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.channelId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.channelId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for store item information.
     * @path /store_items/{storeItemId}
     * @allow (get) Anyone can read store item information.
     * @allow (list) Anyone can list store items.
     * @deny (create) No one can create store items. // TODO: Add admin validation once roles are defined.
     * @deny (update) No one can update store items. // TODO: Add admin validation once roles are defined.
     * @deny (delete) No one can delete store items. // TODO: Add admin validation once roles are defined.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once roles are defined.
      allow update: if false; // TODO: Add admin validation once roles are defined.
      allow delete: if false; // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Rule for delivery addresses for a user.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their own delivery address.
     * @allow (get) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can read their own delivery address.
     * @allow (update) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can update their own delivery address.
     * @allow (delete) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can delete their own delivery address.
     * @deny (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create another user's delivery address (userId !== auth.uid).
     * @deny (get) User with UID 'randomId' cannot read delivery address of user with ID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for order information.
     * @path /orders/{orderId}
     * @allow (get) Anyone can read order information.
     * @allow (list) Anyone can list orders.
     * @deny (create) No one can create orders. // TODO: Add validation once roles are defined.
     * @deny (update) No one can update orders. // TODO: Add validation once roles are defined.
     * @deny (delete) No one can delete orders. // TODO: Add validation once roles are defined.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation once roles are defined.
      allow update: if false; // TODO: Add validation once roles are defined.
      allow delete: if false; // TODO: Add validation once roles are defined.
    }

    /**
     * @description Rule for chat messages between users.
     * @path /chat_messages/{chatMessageId}
     * @allow (get) Anyone can read chat messages.
     * @allow (list) Anyone can list chat messages.
     * @deny (create) No one can create chat messages. // TODO: Add validation once roles are defined.
     * @deny (update) No one can update chat messages. // TODO: Add validation once roles are defined.
     * @deny (delete) No one can delete chat messages. // TODO: Add validation once roles are defined.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation once roles are defined.
      allow update: if false; // TODO: Add validation once roles are defined.
      allow delete: if false; // TODO: Add validation once roles are defined.
    }

    /**
     * @description Rule for friendship relationships between users.
     * @path /friendships/{friendshipId}
     * @allow (get) Anyone can read friendship relationships.
     * @allow (list) Anyone can list friendship relationships.
     * @deny (create) No one can create friendship relationships. // TODO: Add validation once roles are defined.
     * @deny (update) No one can update friendship relationships. // TODO: Add validation once roles are defined.
     * @deny (delete) No one can delete friendship relationships. // TODO: Add validation once roles are defined.
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation once roles are defined.
      allow update: if false; // TODO: Add validation once roles are defined.
      allow delete: if false; // TODO: Add validation once roles are defined.
    }

    /**
     * @description Rule for leaderboard information.
     * @path /leaderboards/{leaderboardId}
     * @allow (get) Anyone can read leaderboard information.
     * @allow (list) Anyone can list leaderboards.
     * @deny (create) No one can create leaderboards. // TODO: Add admin validation once roles are defined.
     * @deny (update) No one can update leaderboards. // TODO: Add admin validation once roles are defined.
     * @deny (delete) No one can delete leaderboards. // TODO: Add admin validation once roles are defined.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once roles are defined.
      allow update: if false; // TODO: Add admin validation once roles are defined.
      allow delete: if false; // TODO: Add admin validation once roles are defined.
    }

    /**
     * @description Rule for leaderboard entries for a specific leaderboard.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get) Anyone can read leaderboard entries.
     * @allow (list) Anyone can list leaderboard entries.
     * @deny (create) No one can create leaderboard entries. // TODO: Add validation once roles are defined.
     * @deny (update) No one can update leaderboard entries. // TODO: Add validation once roles are defined.
     * @deny (delete) No one can delete leaderboard entries. // TODO: Add validation once roles are defined.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation once roles are defined.
      allow update: if false; // TODO: Add validation once roles are defined.
      allow delete: if false; // TODO: Add validation once roles are defined.
    }

    /**
     * @description Rule for notifications for a user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can create their own notification.
     * @allow (get) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can read their own notification.
     * @allow (update) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can update their own notification.
     * @allow (delete) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' can delete their own notification.
     * @deny (create) User with UID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43' cannot create another user's notification (userId !== auth.uid).
     * @deny (get) User with UID 'randomId' cannot read notification of user with ID 'c8i7mNbtLyZHOoMvIzAsVOOWMj43'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}