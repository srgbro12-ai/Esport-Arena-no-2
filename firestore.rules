/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data and allows public read access for certain collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves.
 * - /users/{userId}/wallet: Stores wallet information for a user. Access is restricted to the user themselves.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history for a user's wallet. Access is restricted to the user themselves.
 * - /tournaments/{tournamentId}: Stores tournament information. Publicly readable.
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match information for a specific tournament. Publicly readable.
 * - /participants/{participantId}: Stores participant information. Publicly readable.
 * - /videos/{videoId}: Stores video information. Publicly readable.
 * - /store_items/{storeItemId}: Stores store item information. Publicly readable.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery addresses for a user. Access is restricted to the user themselves.
 * - /orders/{orderId}: Stores order information. Publicly readable.
 * - /chat_messages/{chatMessageId}: Stores chat messages between users. Publicly readable.
 * - /friendships/{friendshipId}: Stores friendship relationships between users. Publicly readable.
 * - /leaderboards/{leaderboardId}: Stores leaderboard information. Publicly readable.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries. Publicly readable.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user. Access is restricted to the user themselves.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's authentication ID.
 * - Read-only access is granted to collections like 'tournaments', 'videos', 'store_items', and 'leaderboards'.
 *
 * Authorization Denormalization:
 * - Wallet and Transaction documents denormalize 'userId' from the parent document, avoiding costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can read and write their own data.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects user wallets, ensuring only the authenticated user can read and write their own wallet data.
     * @path /users/{userId}/wallet
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects user transactions, ensuring only the authenticated user can read and write their own transaction data.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to tournament information. Write access is not allowed.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to match information. Write access is not allowed.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to participant information. Write access is not allowed.
     * @path /participants/{participantId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows public read access to videos. Write access is not allowed.
     * @path /videos/{videoId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /videos/{videoId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to store items. Write access is not allowed.
     * @path /store_items/{storeItemId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects user delivery addresses, ensuring only the authenticated user can read and write their own addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to orders. Write access is not allowed.
     * @path /orders/{orderId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to chat messages. Write access is not allowed.
     * @path /chat_messages/{chatMessageId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to friendships. Write access is not allowed.
     * @path /friendships/{friendshipId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to leaderboards. Write access is not allowed.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to leaderboard entries. Write access is not allowed.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read access.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects user notifications, ensuring only the authenticated user can read and write their own notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}