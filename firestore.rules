/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and related data,
 *              while allowing public read access to certain collections like 'tournaments' and 'store_items'.
 *              All data is nested under /users/{userId}, and subcollections inherit this ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data (merged Channel data).  Ownership is enforced via path.
 * - /users/{userId}/wallet: Stores wallet data. Ownership is inherited from the path.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history.  Ownership inherited.
 * - /tournaments/{tournamentId}: Stores tournament data. Publicly readable, writes restricted (TODO).
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match data. Publicly readable, writes restricted (TODO).
 * - /participants/{participantId}: Stores participant data. Writes restricted to owner of UserProfile.
 * - /users/{userId}/videos/{videoId}: Stores video data. Ownership enforced via path.
 * - /store_items/{storeItemId}: Stores store item data. Publicly readable, writes restricted (TODO).
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery address data. Ownership inherited.
 * - /orders/{orderId}: Stores order data. Writes restricted to owner of UserProfile.
 * - /chat_messages/{chatMessageId}: Stores chat messages. Writes restricted to owner of UserProfile.
 * - /friendships/{friendshipId}: Stores friendship data. Writes restricted to owner of UserProfile.
 * - /leaderboards/{leaderboardId}: Stores leaderboard data. Publicly readable, writes restricted (TODO).
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries. Writes restricted.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications. Ownership enforced via path.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Public read access is granted to 'tournaments' and 'store_items'.
 * - Owner-only access is the default security posture for ambiguous relationships.
 * - Writes to several top-level collections ("tournaments", "store_items", "leaderboards") are currently not secured. TODO: Implement admin-only writes.
 *
 * Denormalization for Authorization:
 * - The 'userId' is denormalized into the 'Wallet', 'Transaction', 'Participant', 'DeliveryAddress', and 'Order' documents to make authorization checks independent and efficient.
 *
 * Structural Segregation:
 * - User-specific data (e.g., videos, delivery addresses) is stored under the /users/{userId} collection to ensure privacy and ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile with id: 'user123'.
     * @allow (get) - User with UID 'user123' can read their own profile.
     * @allow (update) - User with UID 'user123' can update their own profile.
     * @allow (delete) - User with UID 'user123' can delete their own profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with id: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disabled.

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own wallet data.
     * @path /users/{userId}/wallet
     * @allow (create) - User with UID 'user123' can create their own wallet with userId: 'user123'.
     * @allow (get) - User with UID 'user123' can read their own wallet.
     * @allow (update) - User with UID 'user123' can update their own wallet.
     * @allow (delete) - User with UID 'user123' can delete their own wallet.
     * @deny (create) - User with UID 'user456' cannot create a wallet with userId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read and write their own transaction data.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) - User with UID 'user123' can create their own transaction with userId: 'user123'.
     * @allow (get) - User with UID 'user123' can read their own transaction.
     * @allow (update) - User with UID 'user123' can update their own transaction.
     * @allow (delete) - User with UID 'user123' can delete their own transaction.
     * @deny (create) - User with UID 'user456' cannot create a transaction with userId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read tournament data, but restricts writes (TODO: Implement admin-only writes).
     * @path /tournaments/{tournamentId}
     * @allow (get) - Any user can read tournament data.
     * @allow (list) - Any user can list tournament data.
     * @deny (create) - No one can create a tournament.
     * @deny (update) - No one can update a tournament.
     * @deny (delete) - No one can delete a tournament.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only validation.
      allow update: if false; // TODO: Add admin-only validation.
      allow delete: if false; // TODO: Add admin-only validation.
    }

    /**
     * @description Allows anyone to read match data, but restricts writes (TODO: Implement admin-only writes).
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get) - Any user can read match data.
     * @allow (list) - Any user can list match data.
     * @deny (create) - No one can create a match.
     * @deny (update) - No one can update a match.
     * @deny (delete) - No one can delete a match.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only validation.
      allow update: if false; // TODO: Add admin-only validation.
      allow delete: if false; // TODO: Add admin-only validation.
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete participant data with ownership validation.
     * @path /participants/{participantId}
     * @allow (create) - User with UID 'user123' can create a participant.
     * @allow (get) - User with UID 'user123' can read a participant.
     * @allow (update) - User with UID 'user123' can update a participant.
     * @allow (delete) - User with UID 'user123' can delete a participant.
     * @deny (create) - User with UID 'user456' cannot create a participant for user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /participants/{participantId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    /**
     * @description Allows users to read and write their own video data.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) - User with UID 'user123' can create their own video with channelId: 'user123'.
     * @allow (get) - User with UID 'user123' can read their own video.
     * @allow (update) - User with UID 'user123' can update their own video.
     * @allow (delete) - User with UID 'user123' can delete their own video.
     * @deny (create) - User with UID 'user456' cannot create a video with channelId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read store item data, but restricts writes (TODO: Implement admin-only writes).
     * @path /store_items/{storeItemId}
     * @allow (get) - Any user can read store item data.
     * @allow (list) - Any user can list store item data.
     * @deny (create) - No one can create a store item.
     * @deny (update) - No one can update a store item.
     * @deny (delete) - No one can delete a store item.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only validation.
      allow update: if false; // TODO: Add admin-only validation.
      allow delete: if false; // TODO: Add admin-only validation.
    }

    /**
     * @description Allows users to read and write their own delivery address data.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) - User with UID 'user123' can create their own delivery address with userId: 'user123'.
     * @allow (get) - User with UID 'user123' can read their own delivery address.
     * @allow (update) - User with UID 'user123' can update their own delivery address.
     * @allow (delete) - User with UID 'user123' can delete their own delivery address.
     * @deny (create) - User with UID 'user456' cannot create a delivery address with userId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to create, read, update, and delete order data with ownership validation.
     * @path /orders/{orderId}
     * @allow (create) - User with UID 'user123' can create an order with userId: 'user123'.
     * @allow (get) - User with UID 'user123' can read an order with userId: 'user123'.
     * @allow (update) - User with UID 'user123' can update an order with userId: 'user123'.
     * @allow (delete) - User with UID 'user123' can delete an order with userId: 'user123'.
     * @deny (create) - User with UID 'user456' cannot create an order with userId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete chat message data.
     * @path /chat_messages/{chatMessageId}
     * @allow (create) - User with UID 'user123' can create a chat message.
     * @allow (get) - User with UID 'user123' can read a chat message.
     * @allow (update) - User with UID 'user123' can update a chat message.
     * @allow (delete) - User with UID 'user123' can delete a chat message.
     * @deny (create) - User with UID 'user456' cannot create a chat message for user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /chat_messages/{chatMessageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow list: if false;

      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.senderId || request.auth.uid == request.resource.data.receiverId);
      allow update: if isSignedIn() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete friendship data.
     * @path /friendships/{friendshipId}
     * @allow (create) - User with UID 'user123' can create a friendship.
     * @allow (get) - User with UID 'user123' can read a friendship.
     * @allow (update) - User with UID 'user123' can update a friendship.
     * @allow (delete) - User with UID 'user123' can delete a friendship.
     * @deny (create) - User with UID 'user456' cannot create a friendship for user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /friendships/{friendshipId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
      allow list: if false;

      allow create: if isSignedIn() && (request.auth.uid == request.resource.data.user1Id || request.auth.uid == request.resource.data.user2Id);
      allow update: if isSignedIn() && (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.user1Id || request.auth.uid == resource.data.user2Id);
    }

    /**
     * @description Allows anyone to read leaderboard data, but restricts writes (TODO: Implement admin-only writes).
     * @path /leaderboards/{leaderboardId}
     * @allow (get) - Any user can read leaderboard data.
     * @allow (list) - Any user can list leaderboard data.
     * @deny (create) - No one can create a leaderboard.
     * @deny (update) - No one can update a leaderboard.
     * @deny (delete) - No one can delete a leaderboard.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin-only validation.
      allow update: if false; // TODO: Add admin-only validation.
      allow delete: if false; // TODO: Add admin-only validation.
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete leaderboard entry data with ownership validation.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (create) - User with UID 'user123' can create a leaderboard entry.
     * @allow (get) - User with UID 'user123' can read a leaderboard entry.
     * @allow (update) - User with UID 'user123' can update a leaderboard entry.
     * @allow (delete) - User with UID 'user123' can delete a leaderboard entry.
     * @deny (create) - User with UID 'user456' cannot create a leaderboard entry for user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Allows users to read and write their own notification data.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - User with UID 'user123' can create their own notification with userId: 'user123'.
     * @allow (get) - User with UID 'user123' can read their own notification.
     * @allow (update) - User with UID 'user123' can update their own notification.
     * @allow (delete) - User with UID 'user123' can delete their own notification.
     * @deny (create) - User with UID 'user456' cannot create a notification with userId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}