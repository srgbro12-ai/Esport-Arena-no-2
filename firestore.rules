/**
 * @fileoverview Firestore Security Rules for Esport Arena.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * while allowing public read access to shared resources like tournaments and store items.
 * Data consistency is enforced for user-owned documents, ensuring that the
 * document ID matches the authenticated user's UID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile and channel information.
 * - /users/{userId}/wallet: Stores wallet information for a user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history for a user's wallet.
 * - /tournaments/{tournamentId}: Stores tournament information.
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match information for a specific tournament.
 * - /participants/{participantId}: Stores participant information.
 * - /users/{userId}/videos/{videoId}: Stores video information for a user's channel.
 * - /store_items/{storeItemId}: Stores store item information.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery addresses for a user.
 * - /orders/{orderId}: Stores order information.
 * - /chat_messages/{chatMessageId}: Stores chat messages between users.
 * - /friendships/{friendshipId}: Stores friendship relationships between users.
 * - /leaderboards/{leaderboardId}: Stores leaderboard information.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries for a specific leaderboard.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Public read access is granted to tournaments and store items.
 * - Data consistency is enforced for user-owned documents, ensuring that the document ID matches the authenticated user's UID.
 * - Write operations are generally restricted to authenticated users and are further limited by ownership or role-based access control.
 *
 * Denormalization for Authorization:
 * - Wallet, Transaction, Match, Participant, DeliveryAddress, and Order documents denormalize the userId to enable simpler authorization rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true; // Allow anyone to read user profiles
      allow list: if false; // Do not allow listing all users.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own wallet data.
     * @path /users/{userId}/wallet
     * @allow (create, update, delete, get) if request.auth.uid == userId
     * @deny (create, update, delete, get) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own transaction data.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create, update, delete, get) if request.auth.uid == userId
     * @deny (create, update, delete, get) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read tournament data, but restricts creation, updates, and deletion.
     * @path /tournaments/{tournamentId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows anyone to read match data, but restricts creation, updates, and deletion.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows anyone to read participant data, but restricts creation, updates, and deletion.
     * @path /participants/{participantId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows users to read and write their own video data.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create, update, delete, get) if request.auth.uid == userId
     * @deny (create, update, delete, get) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/videos/{videoId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.channelId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.channelId == resource.data.channelId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read store item data, but restricts creation, updates, and deletion.
     * @path /store_items/{storeItemId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows users to read and write their own delivery address data.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create, update, delete, get) if request.auth.uid == userId
     * @deny (create, update, delete, get) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read order data, but restricts creation, updates, and deletion.
     * @path /orders/{orderId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows anyone to read chat message data, but restricts creation, updates, and deletion.
     * @path /chat_messages/{chatMessageId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add more granular rules, likely based on sender/receiver.
      allow update: if false; // TODO: Add more granular rules, likely based on sender/receiver.
      allow delete: if false; // TODO: Add more granular rules, likely based on sender/receiver.
    }

    /**
     * @description Allows anyone to read friendship data, but restricts creation, updates, and deletion.
     * @path /friendships/{friendshipId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add more granular rules based on friendship status and user IDs.
      allow update: if false; // TODO: Add more granular rules based on friendship status and user IDs.
      allow delete: if false; // TODO: Add more granular rules based on friendship status and user IDs.
    }

    /**
     * @description Allows anyone to read leaderboard data, but restricts creation, updates, and deletion.
     * @path /leaderboards/{leaderboardId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows anyone to read leaderboard entry data, but restricts creation, updates, and deletion.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access while restricting write access.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if true;

      allow create: if false; // TODO: Add admin validation if required
      allow update: if false; // TODO: Add admin validation if required
      allow delete: if false; // TODO: Add admin validation if required
    }

    /**
     * @description Allows users to read and write their own notification data.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create, update, delete, get) if request.auth.uid == userId
     * @deny (create, update, delete, get) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}