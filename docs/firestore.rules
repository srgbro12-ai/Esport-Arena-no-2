/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and related data,
 * allowing only the authenticated user to read and write their own data. Public read access is granted
 * to certain collections like tournaments and store items, while write access remains restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/wallet: Stores wallet information for a user.
 * - /users/{userId}/wallet/transactions/{transactionId}: Stores transaction history for a user's wallet.
 * - /tournaments/{tournamentId}: Stores tournament information.
 * - /tournaments/{tournamentId}/matches/{matchId}: Stores match information for a specific tournament.
 * - /participants/{participantId}: Stores participant information.
 * - /users/{userId}/videos/{videoId}: Stores video information for a user's channel.
 * - /store_items/{storeItemId}: Stores store item information.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Stores delivery addresses for a user.
 * - /orders/{orderId}: Stores order information.
 * - /chat_messages/{chatMessageId}: Stores chat messages between users.
 * - /friendships/{friendshipId}: Stores friendship relationships between users.
 * - /leaderboards/{leaderboardId}: Stores leaderboard information.
 * - /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}: Stores leaderboard entries for a specific leaderboard.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for a user.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the authenticated user (userId in path must match auth.uid).
 * - Listing of all users is explicitly denied to protect user privacy.
 * - Public read access is granted to the /tournaments and /store_items collections.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - Wallet, Transaction, Match, Participant, DeliveryAddress, and Order documents include denormalized userId or tournamentId fields to simplify authorization rules and avoid costly `get()` calls.
 *
 * Structural Segregation:
 * - Publicly accessible data (e.g., tournaments, store items) is stored in top-level collections, separate from user-private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that on create, the document id must match the userId.
     */
    function isValidUserId() {
        return request.resource.data.id == request.auth.uid;
    }
    
    /**
     * @description Defines the user profile and channel information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile with userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly prevent listing of all users.
      allow create: if isOwner(userId) && isValidUserId();
      allow update: if isExistingOwner(userId) && isValidUserId();
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the wallet information for a user.
     * @path /users/{userId}/wallet
     * @allow (create) User with UID 'user123' can create their own wallet.
     * @allow (get) User with UID 'user123' can read their own wallet.
     * @deny (create) User with UID 'user456' cannot create a wallet for userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the wallet for userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the transaction history for a user's wallet.
     * @path /users/{userId}/wallet/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction in their wallet.
     * @allow (get) User with UID 'user123' can read a transaction in their wallet.
     * @deny (create) User with UID 'user456' cannot create a transaction for userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update a transaction for userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallet/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the tournament information.
     * @path /tournaments/{tournamentId}
     * @allow (get) Any user can read tournament information.
     * @allow (list) Any user can list tournaments.
     * @deny (create) Only authenticated users can create tournaments.
     * @principle Allows public read access, restricts write access to authenticated users.
     */
    match /tournaments/{tournamentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the match information for a specific tournament.
     * @path /tournaments/{tournamentId}/matches/{matchId}
     * @allow (get) Any user can read match information.
     * @allow (list) Any user can list matches for a tournament.
     * @deny (create) Only authenticated users can create matches.
     * @principle Allows public read access, restricts write access to authenticated users.
     */
    match /tournaments/{tournamentId}/matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the participant information.
     * @path /participants/{participantId}
     * @allow (get) Any user can read participant information.
     * @allow (list) Only authenticated users can list participant information.
     * @deny (create) Only authenticated users can create participant information.
     * @principle Restricts access to authenticated users.
     */
    match /participants/{participantId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the video information for a user's channel.
     * @path /users/{userId}/videos/{videoId}
     * @allow (create) User with UID 'user123' can create a video in their channel.
     * @allow (get) User with UID 'user123' can read a video in their channel.
     * @deny (create) User with UID 'user456' cannot create a video for userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update a video for userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/videos/{videoId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the store item information.
     * @path /store_items/{storeItemId}
     * @allow (get) Any user can read store item information.
     * @allow (list) Any user can list store items.
     * @deny (create) Only authenticated users can create store items.
     * @principle Allows public read access, restricts write access to authenticated users.
     */
    match /store_items/{storeItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the delivery addresses for a user.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) User with UID 'user123' can create a delivery address.
     * @allow (get) User with UID 'user123' can read their delivery address.
     * @deny (create) User with UID 'user456' cannot create a delivery address for userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the delivery address for userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the order information.
     * @path /orders/{orderId}
     * @allow (get) Any user can read order information.
     * @allow (list) Only authenticated users can list order information.
     * @deny (create) Only authenticated users can create orders.
     * @principle Restricts access to authenticated users.
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the chat messages between users.
     * @path /chat_messages/{chatMessageId}
     * @allow (get) Any user can read chat message information.
     * @allow (list) Only authenticated users can list chat messages.
     * @deny (create) Only authenticated users can create chat messages.
     * @principle Restricts access to authenticated users.
     */
    match /chat_messages/{chatMessageId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the friendship relationships between users.
     * @path /friendships/{friendshipId}
     * @allow (get) Any user can read friendship information.
     * @allow (list) Only authenticated users can list friendship information.
     * @deny (create) Only authenticated users can create friendship information.
     * @principle Restricts access to authenticated users.
     */
    match /friendships/{friendshipId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the leaderboard information.
     * @path /leaderboards/{leaderboardId}
     * @allow (get) Any user can read leaderboard information.
     * @allow (list) Any user can list leaderboards.
     * @deny (create) Only authenticated users can create leaderboards.
     * @principle Allows public read access, restricts write access to authenticated users.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the leaderboard entries for a specific leaderboard.
     * @path /leaderboards/{leaderboardId}/entries/{leaderboardEntryId}
     * @allow (get) Any user can read leaderboard entry information.
     * @allow (list) Only authenticated users can list leaderboard entries.
     * @deny (create) Only authenticated users can create leaderboard entries.
     * @principle Restricts access to authenticated users.
     */
    match /leaderboards/{leaderboardId}/entries/{leaderboardEntryId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines the notifications for a user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) User with UID 'user123' can create a notification.
     * @allow (get) User with UID 'user123' can read their notification.
     * @deny (create) User with UID 'user456' cannot create a notification for userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the notification for userId 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}